        int Iterator = 0;
        
        while(current.state.charAt(Iterator) == newNode.state.charAt(Iterator)){
        	Iterator++;
        }       
        
        if (current.state.charAt(Iterator) > newNode.state.charAt(Iterator)) {
        	System.out.println("The Node goes to the left");
        } else if (current.state.charAt(Iterator) < newNode.state.charAt(Iterator)) {
        	System.out.println("The Node goes to the right");
        }


==========================================================================================================

Iterator = 0; // Resets Iterator
				while(current.stateName.charAt(Iterator) == newNode.stateName.charAt(Iterator)){ 
					Iterator++; // This while loop and Iterator is used to find the first letters that aren't the same when comparing them														
				}       
		        if (current.stateName.charAt(Iterator) > newNode.stateName.charAt(Iterator)) { // Deals with a left-path 
		        	if(current.leftChild == null){
		        		current.leftChild = newNode; 
		        		return; // After placing a New Node in a null leftChild, the method is finished. 
		        	}
		        	else if(current.leftChild != null){
		        		current = current.leftChild; 
		        	}
		        } else if (current.stateName.charAt(Iterator) < newNode.stateName.charAt(Iterator)) { //Deals with a right-path
		        	if(current.rightChild == null){
		        		current.rightChild = newNode; 
		        		return; // After placing a New Node in a null rightChild, the method is finished. 
		        	}
		        	else if(current.rightChild != null){
		        		current = current.rightChild;
		        	}
		        }   

=============================================================================================================


int Result = 0; 

public StringComparison(String NodetobeAdded, String CurrentNode) {
int result = 0;

NodetobeAdded.compareTo(CurrentNode)
 

	
}


==================================================================================================================
					System.out.println("State with the minimum population");
					System.out.println("State Name	 	State Population");
					System.out.println("--------------------------------------------");
					current.printNode();











